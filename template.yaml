AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31
Description: >
  canvas-data-2

  This template contains infrastructure for maintaining a Postgresql database containing
  data sourced from Canvas Data 2. It uses the higher-level `dap` functionality from
  instructure to maintain the local tables.

  A Step Function is used to orchestrate the synchronization operations.

Parameters:

  EnvironmentParameter:
    Type: String
    AllowedValues:
      - "dev"
      - "stg"
      - "prod"
    Default: "dev"

  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
      - 'DEBUG'
      - 'INFO'
      - 'WARN'
      - 'ERROR'

  SkipTablesParameter:
    Type: String

  VpcIdParameter:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the VPC to deploy the database and Lambda functions into.

  DatabaseSubnetListParameter:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of one or more subnets to deploy the database into.

  LambdaSubnetListParameter:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of one or more subnets to deploy the Lambda functions into.

  DatabaseAdminUserParameter:
    Description: Name of the RDS admin user
    Type: String

  DatabaseCd2UserParameter:
    Description: Name of the RDS admin user
    Type: String

  ResourcePrefixParameter:
    Description: Prefix for resource names
    Type: String

  TagNameParameter:
    Description: Name for a cost tag
    Type: String

  TagValueParameter:
    Description: Value for a cost tag
    Type: String    

  EcrAccountNumberParameter:
    Type: String

  DatabaseSecurityGroupParameter:
    Type: String
    Description: (Optional) A security group ID for the database. If no group is provided, a security group will be created.
    Default: ''

  AthenaConnectorParameter:
    Type: String
    Description: (Optional) Create an Athena connector for PostgreSQL. Default is false.
    Default: false
    AllowedValues: [true, false]

  AthenaConnectorLambdaNameParameter:
    Type: String
    Description: (Optional) Name of Athena Connector Lambda
    Default: athena_postgresql_connector_cd2

  NotificationTopicParameter:
    Type: String
    Description: (Optional) SNS topic to send notifications
    Default: ''

Conditions:

  # Conditions for BYO Data Security Group
  ExistingDatabaseSecurityGroup: !Not [!Equals [!Ref DatabaseSecurityGroupParameter, '']]
  CreateDatabaseSecurityGroup: !Equals [!Ref DatabaseSecurityGroupParameter, '']
  
  # Conditions for BYO Notification Topic
  ExistingNotificationTopic: !Not [!Equals [!Ref NotificationTopicParameter, '']]
  CreateNotificationTopic: !Equals [!Ref NotificationTopicParameter, '']
  
  # Condition for optional Athena connector
  CreateAthenaConnector: !Equals [true, !Ref AthenaConnectorParameter]

Resources:

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting secrets
      Enabled: true
      Tags: 
        - Key: !Sub ${TagNameParameter}
          Value: !Sub ${TagValueParameter}

  # Create a secret for the CD2 app "canvas" user
  DatabaseUserSecretCanvas:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${ResourcePrefixParameter}-cd2-db-user-${EnvironmentParameter}-canvas
      Description: Aurora database user secret for canvas user
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DatabaseCd2UserParameter}"}'
        GenerateStringKey: password
        PasswordLength: 24
        ExcludePunctuation: true
      KmsKeyId: !Ref KmsKey
      Tags: 
        - Key: !Sub ${TagNameParameter}
          Value: !Sub ${TagValueParameter}      

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${ResourcePrefixParameter}-cd2-subnetgroup-${EnvironmentParameter}
      SubnetIds: !Ref DatabaseSubnetListParameter

  DatabaseClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ResourcePrefixParameter}-cd2-database-client-sg-${EnvironmentParameter}
      VpcId: !Ref VpcIdParameter

  EmptySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ResourcePrefixParameter}-cd2-empty-sg-${EnvironmentParameter}
      VpcId: !Ref VpcIdParameter

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDatabaseSecurityGroup
    Properties:
      GroupDescription: !Sub ${ResourcePrefixParameter}-cd2-database-sg-${EnvironmentParameter}
      VpcId: !Ref VpcIdParameter
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref DatabaseClientSecurityGroup
        # TODO: add more ingress rules based on parameter(s)
      Tags: 
        - Key: !Sub ${TagNameParameter}
          Value: !Sub ${TagValueParameter}

  AuroraDatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineVersion: 15.5
      MasterUsername: !Sub ${DatabaseAdminUserParameter}
      ManageMasterUserPassword: true
      MasterUserSecret:
        KmsKeyId: !Ref KmsKey
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VpcSecurityGroupIds:
          - !If [ExistingDatabaseSecurityGroup, !Ref DatabaseSecurityGroupParameter, !Ref DatabaseSecurityGroup]
      Port: 5432
      DatabaseName: cd2
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 16
      DeletionProtection: false
      EnableHttpEndpoint: true
      BackupRetentionPeriod: 7
      StorageEncrypted: true
      DBClusterParameterGroupName: !Ref DatabaseClusterParameterGroup
      Tags: 
        - Key: !Sub ${TagNameParameter}
          Value: !Sub ${TagValueParameter}

  DatabaseClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties: 
      Description: PostgreSQL parameter group for canvas-data-2
      Family: aurora-postgresql15
      Parameters:
        rds.force_ssl: 1
      Tags: 
        - Key: !Sub ${TagNameParameter}
          Value: !Sub ${TagValueParameter}

  # Attach Canvas database user Secret to the cluster
  DatabaseUserSecretAttachmentCanvas:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseUserSecretCanvas
      TargetId: !Ref AuroraDatabaseCluster
      TargetType: AWS::RDS::DBCluster

  AuroraDatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref AuroraDatabaseCluster
      Tags: 
        - Key: !Sub ${TagNameParameter}
          Value: !Sub ${TagValueParameter}            

  ListTablesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: list_tables/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub '${EnvironmentParameter}/canvas_data_2*'
      Environment:
        Variables:
          ENV: !Ref EnvironmentParameter
          POWERTOOLS_METRICS_NAMESPACE: canvas-data-2
          POWERTOOLS_SERVICE_NAME: list_tables
          LOG_LEVEL: !Ref LogLevel
          SKIP_TABLES: !Ref SkipTablesParameter
      Timeout: 120
      MemorySize: 256
      VpcConfig:
        SecurityGroupIds:
          - !Ref EmptySecurityGroup
        SubnetIds: !Ref LambdaSubnetListParameter

  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ResourcePrefixParameter}-cd2-cluster

  FargateLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}/fargate

  FargateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
            - events.amazonaws.com
      Path: '/'
      Policies:
      - PolicyName: iam_pass_role
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource:
            - !Sub ${TaskRole.Arn}
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # SyncTableFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: sync_table/
  #     Handler: app.lambda_handler
  #     Runtime: python3.11
  #     Architectures:
  #       - x86_64
  #     Policies:
  #       - SSMParameterReadPolicy:
  #           ParameterName: !Sub '${EnvironmentParameter}/canvas_data_2*'
  #       - AWSSecretsManagerGetSecretValuePolicy:
  #           SecretArn: !Ref DatabaseUserSecretCanvas
  #       - AWSSecretsManagerGetSecretValuePolicy:
  #           SecretArn: !GetAtt AuroraDatabaseCluster.MasterUserSecret.SecretArn
  #       - KMSDecryptPolicy:
  #           KeyId: !Ref KmsKey
  #       - Version: '2012-10-17'
  #         Statement:
  #           - Effect: Allow
  #             Action:
  #               - rds-data:*
  #             Resource: !GetAtt AuroraDatabaseCluster.DBClusterArn
  #     Environment:
  #       Variables:
  #         ENV: !Ref EnvironmentParameter
  #         POWERTOOLS_METRICS_NAMESPACE: canvas-data-2
  #         POWERTOOLS_SERVICE_NAME: sync_table
  #         LOG_LEVEL: !Ref LogLevel
  #         DB_USER_SECRET_NAME: !Ref DatabaseUserSecretCanvas
  #         ADMIN_SECRET_ARN: !GetAtt AuroraDatabaseCluster.MasterUserSecret.SecretArn
  #         DB_CLUSTER_ARN: !GetAtt AuroraDatabaseCluster.DBClusterArn
  #     Timeout: 900
  #     MemorySize: 2048
  #     VpcConfig:
  #       SecurityGroupIds:
  #         - !Ref DatabaseClientSecurityGroup
  #       SubnetIds: !Ref LambdaSubnetListParameter

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
            - events.amazonaws.com
      Path: '/'
      Policies:
      - PolicyName: parameter-store
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ssm:DescribeParameters
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:GetParameters
            - ssm:GetParameter
            - ssm:GetParametersByPath
            Resource: !Sub arn:aws:ssm:ca-central-1:${AWS::AccountId}:parameter/stg/canvas_data_2*
      - PolicyName: secrets
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource:
            - !Ref DatabaseUserSecretCanvas
            - !GetAtt AuroraDatabaseCluster.MasterUserSecret.SecretArn
      - PolicyName: kms
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - kms:Decrypt
            Resource: !GetAtt KmsKey.Arn
      - PolicyName: ecr
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:DescribeRepositories
            - ecr:DescribeImages
            - ecr:GetAuthorizationToken
            Resource:
            - !Sub arn:aws:ecr:${AWS::Region}:${EcrAccountNumberParameter}:repository/*
      - PolicyName: rds_data
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - rds-data:*
            Resource:
            - !GetAtt AuroraDatabaseCluster.DBClusterArn
      - PolicyName: state_machine
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - states:SendTaskSuccess
            - states:SendTaskFailure
            # An explicit reference to the CD2 State Machine creates a CloudFormation circular dependency
            # This isn't a great work-around.
            Resource:
            - '*'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy      

  InitTableTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-InitTable
      Cpu: 1024
      Memory: 8192
      EphemeralStorage:
        SizeInGiB: 80
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: !Sub ${FargateExecutionRole.Arn}
      TaskRoleArn: !Sub ${TaskRole.Arn}
      ContainerDefinitions:
      - Name: !Sub ${AWS::StackName}-InitTable
        Cpu: 1024
        Memory: 8192
        Image: !Sub ${EcrAccountNumberParameter}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}/init-table:latest
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref FargateLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: InitTable

  SyncTableTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-SyncTable
      Cpu: 1024
      Memory: 8192
      EphemeralStorage:
        SizeInGiB: 80
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: !Sub ${FargateExecutionRole.Arn}
      TaskRoleArn: !Sub ${TaskRole.Arn}
      ContainerDefinitions:
      - Name: !Sub ${AWS::StackName}-SyncTable
        Cpu: 1024
        Memory: 8192
        Image: !Sub ${EcrAccountNumberParameter}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}/sync-table:latest
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref FargateLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: SyncTable

  WorkflowNotificationTopic:
    Type: AWS::SNS::Topic
    Condition: CreateNotificationTopic
    Properties:
      DisplayName: !Sub "Canvas Data 2 Synchronization Workflow (${EnvironmentParameter})"
      Tags: 
        - Key: !Sub ${TagNameParameter}
          Value: !Sub ${TagValueParameter}      

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "${ListTablesFunction.Arn}*"
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:RunTask"
                Resource:
                  - !Sub "${InitTableTaskDefinition}*"
                  - !Sub "${SyncTableTaskDefinition}*"
        - PolicyName: PassRole
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - iam:PassRole
              Resource:
              - !Sub ${FargateExecutionRole.Arn}
              - !Sub ${TaskRole.Arn}
        - PolicyName: NotificationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !If [ExistingNotificationTopic, !Ref NotificationTopicParameter, !Ref WorkflowNotificationTopic]
        - PolicyName: EventRules
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctions*
      Tags: 
        - Key: !Sub ${TagNameParameter}
          Value: !Sub ${TagValueParameter}

  CD2RefreshStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      #StateMachineName: !Sub ${AWS::StackName}-state-machine
      Role: !GetAtt StatesExecutionRole.Arn
      Events:
        ThreeHourlySchedule:
          Type: ScheduleV2
          Properties:
            Description: Execute the Canvas Data 2 Step Function every 3 hours
            FlexibleTimeWindow:
              Mode: FLEXIBLE
              MaximumWindowInMinutes: 10
            ScheduleExpression: rate(3 hours)
            State: ENABLED
      Definition:
        StartAt: ListTables
        States:
          ListTables:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: "$.Payload"
            Parameters:
              Payload.$: "$"
              FunctionName: !Ref ListTablesFunction
            Retry:
              - ErrorEquals:
                 - Lambda.ServiceException
                 - Lambda.AWSLambdaException
                 - Lambda.SdkClientException
                 - Lambda.TooManyRequestsException
                IntervalSeconds: 2
                MaxAttempts: 6
                BackoffRate: 6
            Next: ProcessTables
          ProcessTables:
            Type: Map
            MaxConcurrency: 30
            ItemsPath: "$.tables"
            Next: PivotResults
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE
              StartAt: SyncTable
              States:
                # SyncTable:
                #   Type: Task
                #   Resource: arn:aws:states:::lambda:invoke
                #   Parameters:
                #     Payload.$: "$"
                #     FunctionName: !Ref SyncTableFunction
                #   Retry:
                #     - ErrorEquals:
                #       - Lambda.ServiceException
                #       - Lambda.AWSLambdaException
                #       - Lambda.SdkClientException
                #       - Lambda.TooManyRequestsException
                #       IntervalSeconds: 2
                #       MaxAttempts: 6
                #       BackoffRate: 6
                #   Catch:
                #     - ErrorEquals:
                #       - States.TaskFailed
                #       ResultPath: "$.error"
                #       Next: TableFailed
                #   Next: CheckSyncState
                SyncTable:
                  Type: Task
                  Resource: arn:aws:states:::ecs:runTask.waitForTaskToken
                  Parameters:
                    LaunchType: FARGATE
                    Cluster: !Ref FargateCluster
                    TaskDefinition: !Ref SyncTableTaskDefinition
                    NetworkConfiguration:
                      AwsvpcConfiguration:
                        AssignPublicIp: DISABLED
                        SecurityGroups:
                        - !Ref DatabaseClientSecurityGroup
                        Subnets:
                        - Fn::ImportValue: !Sub ${ResourcePrefixParameter}-vpc--privateSubnetA
                        - Fn::ImportValue: !Sub ${ResourcePrefixParameter}-vpc--privateSubnetB                        
                    Overrides:
                      ContainerOverrides:
                      - Name: !Sub ${AWS::StackName}-SyncTable
                        Environment:
                        - Name: TASK_TOKEN
                          Value.$: $$.Task.Token
                        - Name: TABLE_NAME
                          Value.$: States.JsonToString($)
                        - Name: ENV
                          Value: !Ref EnvironmentParameter
                        - Name: LOG_LEVEL
                          Value: !Ref LogLevel
                        - Name: POWERTOOLS_METRICS_NAMESPACE
                          Value: canvas-data-2
                        - Name: POWERTOOLS_SERVICE_NAME
                          Value: sync_table
                        - Name: DB_USER_SECRET_NAME
                          Value: !Ref DatabaseUserSecretCanvas
                        - Name: ADMIN_SECRET_ARN
                          Value: !GetAtt AuroraDatabaseCluster.MasterUserSecret.SecretArn
                        - Name: DB_CLUSTER_ARN
                          Value: !GetAtt AuroraDatabaseCluster.DBClusterArn  
                  TimeoutSeconds: 43200
                  Retry:
                    - ErrorEquals:
                      - ECS.ServiceException
                      - ECS.ThrottlingException
                      - ECS.ClientException
                      - ECS.ClusterNotFoundException
                      - ECS.TaskSetNotFoundException
                      IntervalSeconds: 2
                      MaxAttempts: 6
                      BackoffRate: 6
                  Catch:
                    - ErrorEquals:
                      - States.TaskFailed
                      ResultPath: "$.error"
                      Next: TableFailed
                  Next: CheckSyncState                
                CheckSyncState:
                  Type: Choice
                  Choices:
                    - Variable: "$.Payload.state"
                      StringEquals: needs_init
                      Next: InitTable
                  Default: TableComplete
                InitTable:
                  Type: Task
                  Resource: arn:aws:states:::ecs:runTask.waitForTaskToken
                  Parameters:
                    LaunchType: FARGATE
                    Cluster: !Ref FargateCluster
                    TaskDefinition: !Ref InitTableTaskDefinition
                    NetworkConfiguration:
                      AwsvpcConfiguration:
                        AssignPublicIp: DISABLED
                        SecurityGroups:
                        - !Ref DatabaseClientSecurityGroup
                        Subnets:
                        - Fn::ImportValue: !Sub ${ResourcePrefixParameter}-vpc--privateSubnetA
                        - Fn::ImportValue: !Sub ${ResourcePrefixParameter}-vpc--privateSubnetB                        
                    Overrides:
                      ContainerOverrides:
                      - Name: !Sub ${AWS::StackName}-InitTable
                        Environment:
                        - Name: TASK_TOKEN
                          Value.$: $$.Task.Token
                        - Name: TABLE_NAME
                          Value.$: States.JsonToString($.Payload)
                        - Name: ENV
                          Value: !Ref EnvironmentParameter
                        - Name: LOG_LEVEL
                          Value: !Ref LogLevel
                        - Name: POWERTOOLS_METRICS_NAMESPACE
                          Value: canvas-data-2
                        - Name: POWERTOOLS_SERVICE_NAME
                          Value: init_table                          
                        - Name: DB_USER_SECRET_NAME
                          Value: !Ref DatabaseUserSecretCanvas
                  TimeoutSeconds: 43200
                  Retry:
                    - ErrorEquals:
                      - ECS.ServiceException
                      - ECS.ThrottlingException
                      - ECS.ClientException
                      - ECS.ClusterNotFoundException
                      - ECS.TaskSetNotFoundException
                      IntervalSeconds: 2
                      MaxAttempts: 6
                      BackoffRate: 6
                  Catch:
                    - ErrorEquals:
                      - States.TaskFailed
                      ResultPath: "$.error"
                      Next: TableFailed
                  Next: CheckInitState
                CheckInitState:
                  Type: Choice
                  Choices:
                    - Variable: "$.Payload.state"
                      StringEquals: failed
                      Next: TableFailed
                  Default: TableComplete
                TableFailed:
                  Type: Pass
                  OutputPath: "$.Payload"
                  End: true
                TableComplete:
                  Type: Succeed
                  OutputPath: "$.Payload"
          PivotResults:
            Type: Pass
            Next: SendNotification
            Parameters:
              - failed.$: "$[?(@.state==failed || @.state==needs_init || @.state==needs_sync)].table_name"
              - failed_init.$: "$[?(@.state==needs_init)].table_name"
              - failed_sync.$: "$[?(@.state==needs_sync)].table_name"
              - complete_with_update.$: "$[?(@.state==complete_with_update)].table_name"
              - complete.$: "$[?(@.state==complete)].table_name"
              - num_failed.$: "States.ArrayLength($[?(@.state==failed || @.state==needs_init || @.state==needs_sync)].table_name)"
              - num_complete_with_update.$: "States.ArrayLength($[?(@.state==complete_with_update)].table_name)"
              - num_complete.$: "States.ArrayLength($[?(@.state==complete)].table_name)"
          SendNotification:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              Message.$: "$"
              TopicArn: !If [ExistingNotificationTopic, !Ref NotificationTopicParameter, !Ref WorkflowNotificationTopic]
            End: true

  AthenaPostgreSQLConnector:
    Type: AWS::Serverless::Application
    Condition: CreateAthenaConnector
    Properties:
      Location:
        ApplicationId: 'arn:aws:serverlessrepo:us-east-1:292517598671:applications/AthenaPostgreSQLConnector'
        SemanticVersion: 2024.25.1
      Parameters:
        LambdaFunctionName: !Ref AthenaConnectorLambdaNameParameter
        CompositeHandler: PostGreSqlMuxCompositeHandler
        DefaultConnectionString: !Sub |
          postgres://jdbc:postgresql://${AuroraDatabaseCluster.Endpoint.Address}:${AuroraDatabaseCluster.Endpoint.Port}/cd2?${!${ResourcePrefixParameter}-cd2-db-user-${EnvironmentParameter}-canvas}&sslmode=verify-ca&sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory&stringtype=unspecified
        DefaultScale: '0'
        DisableSpillEncryption: 'false'
        LambdaMemory: '3008'
        LambdaRoleARN: !GetAtt AthenaPostgreSQLConnectorRole.Arn
        LambdaTimeout: '900'
        # PermissionsBoundaryARN:
        SecretNamePrefix: !Sub ${ResourcePrefixParameter}-cd2-db-user-${EnvironmentParameter}-canvas
        SecurityGroupIds: !Ref DatabaseClientSecurityGroup
        SpillBucket: !Ref AthenaSpillBucket
        SpillPrefix: postgresql
        SubnetIds: !Join [ ",", !Ref LambdaSubnetListParameter ]

  AthenaSpillBucket:
    Type: AWS::S3::Bucket
    Condition: CreateAthenaConnector
    Properties:
      BucketName: !Sub ${ResourcePrefixParameter}-athena-spill-${AWS::AccountId}-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256

  AthenaPostgreSQLConnectorRole:
    Type: AWS::IAM::Role
    Condition: CreateAthenaConnector
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole

  AthenaPostgreSQLConnectorExecutionPolicy:
    Type: AWS::IAM::Policy
    Condition: CreateAthenaConnector    
    Properties:
      Roles:
      - !Ref AthenaPostgreSQLConnectorRole
      PolicyName: FunctionExecutionPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ResourcePrefixParameter}-cd2-db-user-${EnvironmentParameter}-canvas*
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/AthenaPostgreSQLConnector*
        - Effect: Allow
          Action:
            - athena:GetQueryExecution
            - s3:ListAllMyBuckets
          Resource: '*'
        - Effect: Allow
          Action:
          - ec2:CreateNetworkInterface
          - ec2:DeleteNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DetachNetworkInterface          
          Resource: '*'
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:ListBucket
          - s3:GetBucketLocation
          - s3:GetObjectVersion
          - s3:PutObject
          - s3:PutObjectAcl
          - s3:GetLifecycleConfiguration
          - s3:PutLifecycleConfiguration
          - s3:DeleteObject
          Resource:
            - !Sub ${AthenaSpillBucket.Arn}
            - !Sub ${AthenaSpillBucket.Arn}/*
        - Effect: Allow
          Action:
          - kms:Decrypt
          Resource: !GetAtt KmsKey.Arn

  AthenaPostgreSQLDataCatalog:
    Type: AWS::Athena::DataCatalog
    Condition: CreateAthenaConnector
    Properties:
      Name: CanvasData2
      Description: PostgreSQL connector to Canvas Data 2
      Type: LAMBDA
      Parameters:
        function: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AthenaConnectorLambdaNameParameter}

Outputs:
  AdminSecretArn:
    Value: !GetAtt AuroraDatabaseCluster.MasterUserSecret.SecretArn
    Description: The ARN of the Aurora admin user secret
    Export:
      Name: !Sub ${ResourcePrefixParameter}-cd2-aurora-admin-secret-arn-${EnvironmentParameter}
  AuroraClusterArn:
    Value: !GetAtt AuroraDatabaseCluster.DBClusterArn
    Description: The ARN of the Aurora cluster
    Export:
      Name: !Sub ${ResourcePrefixParameter}-cd2-aurora-cluster-arn-${EnvironmentParameter}
